npm install

DB_HOST=localhost
DB_PORT=5432
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_NAME=your_db_name
DB_SSL=false

PORT=3000
SECRET_KEY=your_secret_key

-- users
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  password VARCHAR(100) NOT NULL
);

-- products
CREATE TABLE products (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT,
  price NUMERIC(10, 2) NOT NULL
);


npm run load-products


npm start


{
  "username": "john_doe",
  "password": "secret_password"
}


npm install @grapecity/spread-sheets-angular --save

import { Component } from '@angular/core';
import { SpreadComponent } from '@grapecity/spread-sheets-angular';
import { Workbook } from '@grapecity/spread-sheets';

@Component({
  selector: 'app-root',
  template: `
    <gc-spread
      #spread
      (workbookInitialized)="workbookInit($event)"
      [sheetData]="sheetData"
    ></gc-spread>
  `
})
export class AppComponent {
  title = 'SJS-Angular-IO-Excel';
  hostStyle = {
    width: '95%',
    height: '600px'
  };
  private spread: Workbook;
  private currentCustomerIndex = 0;
  columnWidth = 100;
  sheetData: any;

  workbookInit(workbook: Workbook) {
    this.spread = workbook;
    this.loadExcelTemplate();
  }

  loadExcelTemplate() {
    const url = 'https://docs.google.com/spreadsheets/d/1Puy7ZwVWkri384hMg5EYVga7uaVNjIHM/edit#gid=125165131';
    fetch(url)
      .then(response => response.arrayBuffer())
      .then(data => {
        const workbook = new Workbook();
        workbook.fromArrayBuffer(data);
        this.spread.fromJSON(workbook.toJSON());
      })
      .catch(error => console.error('Error loading Excel template:', error));
  }
}


import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { SpreadModule } from '@grapecity/spread-sheets-angular';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, SpreadModule],
  bootstrap: [AppComponent]
})
export class AppModule {}






Node.js: Entorno de ejecución para JavaScript en el servidor.
Express: Framework web para Node.js.
PostgreSQL: Base de datos relacional.
pg: Driver de PostgreSQL para Node.js.
xlsx: Librería para leer archivos Excel.
bcrypt: Librería para hashear contraseñas.
jsonwebtoken: Librería para generar tokens JWT.
typescript


